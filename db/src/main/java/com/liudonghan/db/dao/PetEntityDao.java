package com.liudonghan.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.liudonghan.db.entity.PetEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PET_ENTITY".
*/
public class PetEntityDao extends AbstractDao<PetEntity, Long> {

    public static final String TABLENAME = "PET_ENTITY";

    /**
     * Properties of entity PetEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Pettype = new Property(1, int.class, "pettype", false, "PETTYPE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property EngName = new Property(3, String.class, "engName", false, "ENG_NAME");
        public final static Property Characters = new Property(4, String.class, "characters", false, "CHARACTERS");
        public final static Property Nation = new Property(5, String.class, "nation", false, "NATION");
        public final static Property EasyOfDisease = new Property(6, String.class, "easyOfDisease", false, "EASY_OF_DISEASE");
        public final static Property Life = new Property(7, String.class, "life", false, "LIFE");
        public final static Property Price = new Property(8, String.class, "price", false, "PRICE");
        public final static Property Desc = new Property(9, String.class, "desc", false, "DESC");
        public final static Property Feature = new Property(10, String.class, "feature", false, "FEATURE");
        public final static Property CharacterFeature = new Property(11, String.class, "characterFeature", false, "CHARACTER_FEATURE");
        public final static Property CareKnowledge = new Property(12, String.class, "careKnowledge", false, "CARE_KNOWLEDGE");
        public final static Property FeedPoints = new Property(13, String.class, "feedPoints", false, "FEED_POINTS");
        public final static Property Url = new Property(14, String.class, "url", false, "URL");
        public final static Property CoverURL = new Property(15, String.class, "coverURL", false, "COVER_URL");
    }


    public PetEntityDao(DaoConfig config) {
        super(config);
    }
    
    public PetEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PET_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PETTYPE\" INTEGER NOT NULL ," + // 1: pettype
                "\"NAME\" TEXT," + // 2: name
                "\"ENG_NAME\" TEXT," + // 3: engName
                "\"CHARACTERS\" TEXT," + // 4: characters
                "\"NATION\" TEXT," + // 5: nation
                "\"EASY_OF_DISEASE\" TEXT," + // 6: easyOfDisease
                "\"LIFE\" TEXT," + // 7: life
                "\"PRICE\" TEXT," + // 8: price
                "\"DESC\" TEXT," + // 9: desc
                "\"FEATURE\" TEXT," + // 10: feature
                "\"CHARACTER_FEATURE\" TEXT," + // 11: characterFeature
                "\"CARE_KNOWLEDGE\" TEXT," + // 12: careKnowledge
                "\"FEED_POINTS\" TEXT," + // 13: feedPoints
                "\"URL\" TEXT," + // 14: url
                "\"COVER_URL\" TEXT);"); // 15: coverURL
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PET_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PetEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPettype());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String engName = entity.getEngName();
        if (engName != null) {
            stmt.bindString(4, engName);
        }
 
        String characters = entity.getCharacters();
        if (characters != null) {
            stmt.bindString(5, characters);
        }
 
        String nation = entity.getNation();
        if (nation != null) {
            stmt.bindString(6, nation);
        }
 
        String easyOfDisease = entity.getEasyOfDisease();
        if (easyOfDisease != null) {
            stmt.bindString(7, easyOfDisease);
        }
 
        String life = entity.getLife();
        if (life != null) {
            stmt.bindString(8, life);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(9, price);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(10, desc);
        }
 
        String feature = entity.getFeature();
        if (feature != null) {
            stmt.bindString(11, feature);
        }
 
        String characterFeature = entity.getCharacterFeature();
        if (characterFeature != null) {
            stmt.bindString(12, characterFeature);
        }
 
        String careKnowledge = entity.getCareKnowledge();
        if (careKnowledge != null) {
            stmt.bindString(13, careKnowledge);
        }
 
        String feedPoints = entity.getFeedPoints();
        if (feedPoints != null) {
            stmt.bindString(14, feedPoints);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(15, url);
        }
 
        String coverURL = entity.getCoverURL();
        if (coverURL != null) {
            stmt.bindString(16, coverURL);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PetEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPettype());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String engName = entity.getEngName();
        if (engName != null) {
            stmt.bindString(4, engName);
        }
 
        String characters = entity.getCharacters();
        if (characters != null) {
            stmt.bindString(5, characters);
        }
 
        String nation = entity.getNation();
        if (nation != null) {
            stmt.bindString(6, nation);
        }
 
        String easyOfDisease = entity.getEasyOfDisease();
        if (easyOfDisease != null) {
            stmt.bindString(7, easyOfDisease);
        }
 
        String life = entity.getLife();
        if (life != null) {
            stmt.bindString(8, life);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(9, price);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(10, desc);
        }
 
        String feature = entity.getFeature();
        if (feature != null) {
            stmt.bindString(11, feature);
        }
 
        String characterFeature = entity.getCharacterFeature();
        if (characterFeature != null) {
            stmt.bindString(12, characterFeature);
        }
 
        String careKnowledge = entity.getCareKnowledge();
        if (careKnowledge != null) {
            stmt.bindString(13, careKnowledge);
        }
 
        String feedPoints = entity.getFeedPoints();
        if (feedPoints != null) {
            stmt.bindString(14, feedPoints);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(15, url);
        }
 
        String coverURL = entity.getCoverURL();
        if (coverURL != null) {
            stmt.bindString(16, coverURL);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PetEntity readEntity(Cursor cursor, int offset) {
        PetEntity entity = new PetEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // pettype
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // engName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // characters
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nation
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // easyOfDisease
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // life
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // price
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // desc
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // feature
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // characterFeature
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // careKnowledge
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // feedPoints
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // url
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // coverURL
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PetEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPettype(cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEngName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCharacters(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNation(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEasyOfDisease(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLife(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPrice(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDesc(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFeature(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCharacterFeature(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCareKnowledge(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFeedPoints(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUrl(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCoverURL(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PetEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PetEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PetEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
