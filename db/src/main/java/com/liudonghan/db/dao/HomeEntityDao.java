package com.liudonghan.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.liudonghan.db.entity.HomeEntity;

import com.liudonghan.db.entity.HomeEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOME_ENTITY".
*/
public class HomeEntityDao extends AbstractDao<HomeEntity, Long> {

    public static final String TABLENAME = "HOME_ENTITY";

    /**
     * Properties of entity HomeEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property SubName = new Property(2, String.class, "subName", false, "SUB_NAME");
        public final static Property ContentJson = new Property(3, String.class, "contentJson", false, "CONTENT_JSON");
        public final static Property IsShow = new Property(4, boolean.class, "isShow", false, "IS_SHOW");
        public final static Property Path = new Property(5, String.class, "path", false, "PATH");
        public final static Property Category = new Property(6, int.class, "category", false, "CATEGORY");
        public final static Property Sort = new Property(7, int.class, "sort", false, "SORT");
        public final static Property HomeEntity = new Property(8, Long.class, "homeEntity", false, "HOME_ENTITY");
    }

    private DaoSession daoSession;


    public HomeEntityDao(DaoConfig config) {
        super(config);
    }
    
    public HomeEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOME_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"SUB_NAME\" TEXT," + // 2: subName
                "\"CONTENT_JSON\" TEXT," + // 3: contentJson
                "\"IS_SHOW\" INTEGER NOT NULL ," + // 4: isShow
                "\"PATH\" TEXT," + // 5: path
                "\"CATEGORY\" INTEGER NOT NULL ," + // 6: category
                "\"SORT\" INTEGER NOT NULL ," + // 7: sort
                "\"HOME_ENTITY\" INTEGER);"); // 8: homeEntity
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOME_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HomeEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String subName = entity.getSubName();
        if (subName != null) {
            stmt.bindString(3, subName);
        }
 
        String contentJson = entity.getContentJson();
        if (contentJson != null) {
            stmt.bindString(4, contentJson);
        }
        stmt.bindLong(5, entity.getIsShow() ? 1L: 0L);
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(6, path);
        }
        stmt.bindLong(7, entity.getCategory());
        stmt.bindLong(8, entity.getSort());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HomeEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String subName = entity.getSubName();
        if (subName != null) {
            stmt.bindString(3, subName);
        }
 
        String contentJson = entity.getContentJson();
        if (contentJson != null) {
            stmt.bindString(4, contentJson);
        }
        stmt.bindLong(5, entity.getIsShow() ? 1L: 0L);
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(6, path);
        }
        stmt.bindLong(7, entity.getCategory());
        stmt.bindLong(8, entity.getSort());
    }

    @Override
    protected final void attachEntity(HomeEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public HomeEntity readEntity(Cursor cursor, int offset) {
        HomeEntity entity = new HomeEntity( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // subName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // contentJson
            cursor.getShort(offset + 4) != 0, // isShow
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // path
            cursor.getInt(offset + 6), // category
            cursor.getInt(offset + 7) // sort
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HomeEntity entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSubName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContentJson(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsShow(cursor.getShort(offset + 4) != 0);
        entity.setPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCategory(cursor.getInt(offset + 6));
        entity.setSort(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HomeEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HomeEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HomeEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getHomeEntityDao().getAllColumns());
            builder.append(" FROM HOME_ENTITY T");
            builder.append(" LEFT JOIN HOME_ENTITY T0 ON T.\"HOME_ENTITY\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected HomeEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        HomeEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        HomeEntity homeEntity = loadCurrentOther(daoSession.getHomeEntityDao(), cursor, offset);
        entity.setHomeEntity(homeEntity);

        return entity;    
    }

    public HomeEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<HomeEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<HomeEntity> list = new ArrayList<HomeEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<HomeEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<HomeEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
