package com.liudonghan.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.liudonghan.db.entity.HomeEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOME_ENTITY".
*/
public class HomeEntityDao extends AbstractDao<HomeEntity, Long> {

    public static final String TABLENAME = "HOME_ENTITY";

    /**
     * Properties of entity HomeEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property SubName = new Property(2, String.class, "subName", false, "SUB_NAME");
        public final static Property ContentJson = new Property(3, String.class, "contentJson", false, "CONTENT_JSON");
        public final static Property IsShow = new Property(4, boolean.class, "isShow", false, "IS_SHOW");
        public final static Property Path = new Property(5, String.class, "path", false, "PATH");
        public final static Property Category = new Property(6, int.class, "category", false, "CATEGORY");
        public final static Property Sort = new Property(7, int.class, "sort", false, "SORT");
    }


    public HomeEntityDao(DaoConfig config) {
        super(config);
    }
    
    public HomeEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOME_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"SUB_NAME\" TEXT," + // 2: subName
                "\"CONTENT_JSON\" TEXT," + // 3: contentJson
                "\"IS_SHOW\" INTEGER NOT NULL ," + // 4: isShow
                "\"PATH\" TEXT," + // 5: path
                "\"CATEGORY\" INTEGER NOT NULL ," + // 6: category
                "\"SORT\" INTEGER NOT NULL );"); // 7: sort
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOME_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HomeEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String subName = entity.getSubName();
        if (subName != null) {
            stmt.bindString(3, subName);
        }
 
        String contentJson = entity.getContentJson();
        if (contentJson != null) {
            stmt.bindString(4, contentJson);
        }
        stmt.bindLong(5, entity.getIsShow() ? 1L: 0L);
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(6, path);
        }
        stmt.bindLong(7, entity.getCategory());
        stmt.bindLong(8, entity.getSort());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HomeEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String subName = entity.getSubName();
        if (subName != null) {
            stmt.bindString(3, subName);
        }
 
        String contentJson = entity.getContentJson();
        if (contentJson != null) {
            stmt.bindString(4, contentJson);
        }
        stmt.bindLong(5, entity.getIsShow() ? 1L: 0L);
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(6, path);
        }
        stmt.bindLong(7, entity.getCategory());
        stmt.bindLong(8, entity.getSort());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public HomeEntity readEntity(Cursor cursor, int offset) {
        HomeEntity entity = new HomeEntity( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // subName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // contentJson
            cursor.getShort(offset + 4) != 0, // isShow
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // path
            cursor.getInt(offset + 6), // category
            cursor.getInt(offset + 7) // sort
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HomeEntity entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSubName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContentJson(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsShow(cursor.getShort(offset + 4) != 0);
        entity.setPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCategory(cursor.getInt(offset + 6));
        entity.setSort(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HomeEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HomeEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HomeEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
